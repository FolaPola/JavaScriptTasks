'use strict';

"" + 1 + 0 // '10'. При сложение "" - преобразуется к строке => "1" + 0 => "10"
"" - 1 + 0 //  -1 . А вот при вычитание - к числу => 0 + 1 + 0 => 1
true + false // 1. Тут преобразования true = 1 и false = 0 => 1 + 0 = 1
6 / "3" // 2. Опять же произошло приобразование к числу 6/'3' = 2
"2" * "3" // 6. Тут тоже произошло преобразование к числу 
4 + 5 + "px" // '9px'. сначала происходит сложение чисел, далее при сложение с px происходит преобразование к строке
"$" + 4 + 5 // '$45'. Всё преобразовалось к строке 
"4" - 2 // 2. Так как тут вычитание результат получается число
"4px" - 2 // NaN. так как пытаемся вычестить из строки, где помимо чисел есть другие символы
"  -9  " + 5 // ' -9 5'. Классическое сложение строк
"  -9  " - 5 // -14. Опять же всё преобразовалось к числу
null + 1 // 1 null => 0, а 0 + 1 = 1
undefined + 1 // NaN => undefined преобзуется к NaN и из-за этого ответ такой 
" \t \n" - 2 /* -2. А вот здесь меня удивило решение, что символы пробельные игнорируются 
и получится пустая строка, которая в итоге будет просто преобразована в ноль. Очень интересно 
получается*/